<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>EvaluateTodo.Server</name></assembly>
<members>
<member name="T:EvaluateTodo.Server.DbMapping.DbReturnCondition`1">
<summary>
 Unified db return type
</summary>
</member>
<member name="T:EvaluateTodo.Server.DbMapping.UpdateTodoContent">
<summary>
 Parameters for UPDATE SET
</summary>
</member>
<member name="T:EvaluateTodo.Server.DbMapping.InsertTodo">
<summary>
 Parameters for INSERT INTO VALUES
</summary>
</member>
<member name="T:EvaluateTodo.Server.DbMapping.QueryPair">
<summary>
 Select Clause + Where Clause
</summary>
</member>
<member name="T:EvaluateTodo.Server.DbMapping.SelectClause">
<summary>
 Select Clause part of SQL string
</summary>
</member>
<member name="T:EvaluateTodo.Server.DbMapping.WhereCondition">
<summary>
 Unified SQL where condition
</summary>
</member>
<member name="T:EvaluateTodo.Server.DbMapping.TodoEntity">
<summary>
 Projection of SELECT query
</summary>
</member>
<member name="M:EvaluateTodo.Server.TodoNpgSql.castDbQueryReturn``1(``0)">
<summary>
 Null from DB -&gt; None
</summary>
</member>
<member name="T:EvaluateTodo.Server.TodoNpgSql">
<summary>
 Data access related procedures
</summary>
</member>
<member name="T:EvaluateTodo.Server.DAL.ITodoRepository">
<summary>
 Decoupling Data access logic from implementation
</summary>
</member>
<member name="T:EvaluateTodo.Server.DAL.TodoRepositoryNpgSql">
<summary>
 Delegate data access logic to NpgSql + Dapper implementation
</summary>
</member>
<member name="T:EvaluateTodo.Server.Util.ErrorCollection">
<summary>
 Represent ApiController validation error format
</summary>
</member>
<member name="T:EvaluateTodo.Server.Util.ErrorItemTitle">
<summary>
 Error source category
</summary>
</member>
<member name="M:EvaluateTodo.Server.Util.ErrorX.op_PlusQmark``4(Microsoft.FSharp.Core.FSharpResult{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Core.FSharpResult{``2,Microsoft.FSharp.Collections.FSharpList{``1}})">
<summary>
 OK -&gt; empty string / Error -&gt; combine error message
</summary>
</member>
<member name="P:EvaluateTodo.Server.Util.ErrorItem.consolidate">
<summary>
 Collect error messages into Dictionary
</summary>
</member>
<member name="T:EvaluateTodo.Server.Util.ErrorItem">
<summary>
 Transform and collect error message
</summary>
</member>
<member name="T:EvaluateTodo.Server.Util.PrimaryUtil.String50">
<summary>
 Ensure string length from 0 to 50
</summary>
</member>
<member name="M:EvaluateTodo.Server.Util.PrimaryUtil.String50Module.getSample(System.String)">
<summary>
 For unit test arrangement
</summary>
</member>
<member name="M:EvaluateTodo.Server.Util.PrimaryUtil.String50Module.value(EvaluateTodo.Server.Util.PrimaryUtil.String50)">
<summary>
 Simple Getter because destructor is disabled.
</summary>
</member>
<member name="M:EvaluateTodo.Server.Util.PrimaryUtil.String50Module.ctor(System.String)">
<summary>
 Constructor with validation
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.Rest.ErrorViewModel">
<summary>
 Unified error return, align with APIController model invalid format.
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.Rest.HttpCode">
<summary>
 Map to HTTP status code
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.Rest.TodoViewModel">
<summary>
 Query response content
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.Rest.PatchTodo">
<summary>
 Patch endpoint model
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.Rest.PostTodo">
<summary>
 Post endpoint model
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.Rest.FilterTodo">
<summary>
 Filter endpoint model (From Uri)
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.Validation.ValidFilter">
<summary>
 Validated Filter inputs
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.Validation.ValidPatch">
<summary>
 Validated Patch inputs
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.Validation.ValidPost">
<summary>
 Validated Post inputs
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.Validation.Validate.filter(EvaluateTodo.Server.Dto.Rest.FilterTodo)">
<summary>
 Validate filter endpoint model
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.Validation.Validate.thePatchedItem(EvaluateTodo.Server.DbMapping.TodoEntity)">
<summary>
 Validate select todoItem from DB
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.Validation.Validate.patch(EvaluateTodo.Server.Dto.Rest.PatchTodo)">
<summary>
 Validate patch endpoint model
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.Validation.Validate.consumeNullable``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpResult{``1,``2}},``0)">
<summary>
 Combine null handling with validation
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.Validation.Validate.post(EvaluateTodo.Server.Dto.Rest.PostTodo)">
<summary>
 Validate post endpoint model
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.Validation.Validate.priorityInt(System.Nullable{System.Int32})">
<summary>
 Validate priority id from DB
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.Validation.Validate.priorityStr(System.String)">
<summary>
 Validate priority string in model from post / patch endpoints
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.Validation.Validate">
<summary>
 Validation functions
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.ToDb.todoItemExtractUpdateParameter(EvaluateTodo.Server.Domain.TodoItem)">
<summary>
 Map Domain model to DB command parameters
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.ToDb.extractTodoContent(EvaluateTodo.Server.Domain.TodoContent)">
<summary>
 Map Domain model to DB command parameters
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.ToDb.dbReturnConditionToResult``1(EvaluateTodo.Server.DbMapping.DbReturnCondition{``0})">
<summary>
 Map DB query / exec return condition to Result
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.ToDb.postDtoToInsertParameter(EvaluateTodo.Server.Dto.Validation.ValidPost)">
<summary>
 Convert Valid post model to SQL parameter
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.ToDb.filterDtoToWhereClause(EvaluateTodo.Server.Dto.Validation.ValidFilter)">
<summary>
 Convert valid filter model to SQL
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.ToDb.priorityToId(EvaluateTodo.Server.Domain.Priority)">
<summary>
 Convert Priority domain type to value in DB
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.ToDb">
<summary>
 Map Domain and Valid endpoint Dto to DB related DTO
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.ToDomain.consolidatePatchCmd(EvaluateTodo.Server.Dto.Validation.ValidPatch)">
<summary>
 Combine patch requests into single operation
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.ToDomain">
<summary>
 Process valid endpoint DTO to domain model
</summary>
</member>
<member name="P:EvaluateTodo.Server.Dto.ToViewModel.notFound">
<summary>
 Assemble error view model then pass to typed not found
</summary>
</member>
<member name="P:EvaluateTodo.Server.Dto.ToViewModel.badRequest">
<summary>
 Assemble error view model then pass to typed bad request
</summary>
</member>
<member name="M:EvaluateTodo.Server.Dto.ToViewModel.entity2ViewModel(EvaluateTodo.Server.DbMapping.TodoEntity)">
<summary>
 Map DB entity to view model
</summary>
</member>
<member name="P:EvaluateTodo.Server.Dto.ToViewModel.priorityToStr">
<summary>
 Convert Priority id to value in view
</summary>
</member>
<member name="T:EvaluateTodo.Server.Dto.ToViewModel">
<summary>
 Deliver View Model DTO for Frontend
</summary>
</member>
<member name="M:EvaluateTodo.Server.Flow.Railway.patchById(EvaluateTodo.Server.DAL.ITodoRepository,System.Int32,EvaluateTodo.Server.Dto.Rest.PatchTodo)">
<summary>
 Try to update the selected todoItem with provided field values
</summary>
</member>
<member name="M:EvaluateTodo.Server.Flow.Railway.deleteById(EvaluateTodo.Server.DAL.ITodoRepository,System.Int32)">
<summary>
 Try to delete the selected todoItem
</summary>
</member>
<member name="M:EvaluateTodo.Server.Flow.Railway.insertSingleTodo(EvaluateTodo.Server.DAL.ITodoRepository,EvaluateTodo.Server.Dto.Rest.PostTodo)">
<summary>
 Try to insert a todoItem based on provided field values
</summary>
</member>
<member name="M:EvaluateTodo.Server.Flow.Railway.queryById(EvaluateTodo.Server.DAL.ITodoRepository,System.Int32)">
<summary>
 Try to fetch the selected todoItem
</summary>
</member>
<member name="M:EvaluateTodo.Server.Flow.Railway.filterBy(EvaluateTodo.Server.DAL.ITodoRepository,EvaluateTodo.Server.Dto.Rest.FilterTodo)">
<summary>
 List all todos in DB with specified filtering conditions
</summary>
</member>
<member name="M:EvaluateTodo.Server.Flow.Railway.queryAll(EvaluateTodo.Server.DAL.ITodoRepository)">
<summary>
 List all todos in DB
</summary>
</member>
<member name="M:EvaluateTodo.Server.Flow.Railway.queryAllTemplate``1(EvaluateTodo.Server.DbMapping.DbReturnCondition{``0})">
<summary>
 Wrap query return with status
</summary>
</member>
<member name="M:EvaluateTodo.Server.Flow.Railway.resultToHttp``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,``1},Microsoft.FSharp.Core.FSharpResult{``0,``2})">
<summary>
 Map Result to Http Code
</summary>
</member>
<member name="M:EvaluateTodo.Server.Flow.Railway.resultFromOption``2(``0,Microsoft.FSharp.Core.FSharpOption{``1})">
<summary>
 In case of not found is an error.
</summary>
</member>
<member name="T:EvaluateTodo.Server.Flow.Railway">
<summary>
 Consolidate data flow via Railway oriented programming
</summary>
</member>
<member name="M:EvaluateTodo.Server.Controllers.TodoController.Post(EvaluateTodo.Server.Dto.Rest.PostTodo)">
<summary>
 Add new item
</summary>
</member>
<member name="M:EvaluateTodo.Server.Controllers.TodoController.Patch(System.Int32,EvaluateTodo.Server.Dto.Rest.PatchTodo)">
<summary>
 Update specified item by id, only non-null fields would take effect.
</summary>
</member>
<member name="M:EvaluateTodo.Server.Controllers.TodoController.GetFilteredAll(EvaluateTodo.Server.Dto.Rest.FilterTodo)">
<summary>
 Fetch all satisfied items
</summary>
</member>
<member name="M:EvaluateTodo.Server.Controllers.TodoController.GetById(System.Int32)">
<summary>
 Fetch specified item by id
</summary>
</member>
<member name="M:EvaluateTodo.Server.Controllers.TodoController.GetAll">
<summary>
 Fetch all items
</summary>
</member>
<member name="M:EvaluateTodo.Server.Controllers.TodoController.Delete(System.Int32)">
<summary>
 Delete specified item by id
</summary>
</member>
</members>
</doc>
